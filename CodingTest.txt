코딩테스트 출제 경향

그리디
구현
DFS/BFS를 활용한 탐색

삼성
완전 탐색, 시뮬레이션, 구현, DFS/BFS

카카오 (카카오 기술블로그에 기출문제 풀이 확인 가능)
구현, 이진탐색, 자료구조
추천시스템개발

라인
탐색, 구현, 문자열, 다이나믹 프로그래밍
자료구조, 완전탐색, 구현


머신러닝/딥러닝
확률적 경사하강법
경사하강법
손실함수
Softmax
ReLU

논문 구현


알고리즘 성능테스트
시간 복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석
공간 복잡도 : 알고리즘의 메모리 사용량 분석
복잡도가 낮을 수록 좋은 알고리즘

시간제한 1초인 경우
N의 범위(500) - n^3 가능
N의 범위(2,000) - n^2 가능
N의 범위(100,000) - nlogn 가능
N의 범위(10,000,000) - n 가능


해결과정
* 컴퓨터적 사고
* 요구사항(복잡도) 계산
* 핵심 아이디어 캐치

import time
start_time = time.time()
end_time = time.time()
print("time : ", end_time-start_time)
으로 시간측정 가능

list 함수 시간복잡도
append() - 1
sort() - nlogn #오름차순
reverse() - n #내림차순
insert() - n
count(특정값) - n
remove(특정값) - n